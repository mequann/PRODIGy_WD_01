note for code used latters this from the code modified from user adin
// import React, { useEffect, useState } from 'react';
// import getAllUsers from './../../services/services.user';
// import { BsPencilFill } from 'react-icons/bs';
// import AdminUserAddForm from './AdminUserAddForm';
// import Draggable from 'react-draggable';
// import api from '../../utils/api';

// function UserList() {
//   const [users, setUsers] = useState([]);
//   const[editeId,setEditedId]=useState()
//   const[isEditable,setIsEdited]=useState(false)

//   useEffect(() => {
//     const fetchUsers = async () => {
//       try {
//         const response = await getAllUsers();

//         if (response.data && Array.isArray(response.data.data)) {
//           setUsers(response.data.data);
//         } else {
//           console.error('Invalid data structure:', response);
//           setUsers([]);
//         }
//       } catch (error) {
//         console.error('Error fetching users:', error);
//       }
//     };

//     fetchUsers();
//   }, []);
//   //function to handle the user editting
//   const handleEditClick = (userId) => {
//     setEditedId(userId);
//     setIsEdited(prevState => (prevState && userId === editeId) ? false : true);
//   };
// //const update function
//   const updateUser = async (value) => {

//     try {
//       console.log(value)
      
//       const updateduser= await api.put(`/api/update/${editeId}`,value)
//       console.log(updateduser,'updated user')
//       if(!updateduser){

//         return console.log('updatting error')
//       }
//       else{
//         alert('update success')
//         setIsEdited(false);
       
//       return updateduser
//       }
//     }
//     catch (error) {
//       console.error('Error updating user:', error);
//     }
//   }


//   return (
//     <div className="w-full mx-auto pl-6 bg-white rounded-md shadow-md overflow-x-auto">
//       <h1 className="text-2xl font-bold mb-4 text-center">User List</h1>

//       {users.length === 0 ? (
//         <p>No users found.</p>
//       ) : (
//         <table className="min-w-full bg-white border border-gray-300">
//           <thead>
//             <tr>
//               <th className="border-b p-2">User Name</th>
//               <th className="border-b p-2">First Name</th>
//               <th className="border-b p-2">User Role</th>
//               <th className="border-b p-2">Edit user</th>
//             </tr>
//           </thead>
//           <tbody>
//             {users?.map((user) => (
//               <tr key={user.userId}>
//                 <td className="border-b p-2 font-medium text-center">{user.userName}</td>
//                 <td className="border-b p-2 text-gray-600 text-center">{user.firstName}</td>
//                 <td className="border-b p-2 text-center">{user.userRole}</td>
//                 <td className="border-b p-2 text-center"><button onClick={()=>handleEditClick(user.userId)}   className="bg-blue-500 text-white py-1 px-1 rounded m-2 ">
//                 <BsPencilFill/></button></td>
                
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       )}
//      {isEditable && (
//   <Draggable>
//     <div className="fixed top-0 left-0 w-full h-full flex items-center justify-center">
//       <div className="absolute top-12 left-1/2 transform -translate-x-1/2 w-96 bg-white p-4 rounded-md shadow-md">
//         {/* <h1 className="text-xl font-bold mb-4">Edit User</h1> */}
//         <AdminUserAddForm onUpdate={updateUser} 
//         status="edit" 
//         isEditable={isEditable}
      
//        />
//       </div>
//     </div>
//   </Draggable>
// )}
//     </div>
//   );
// }

// export default UserList;




//##############
user add form 
// import React, { useState } from "react";
// import api from "../../utils/api";
// import UserList from "./UserList";

// function AdminUserAddForm(props) {
//   const [formData, setFormData] = useState({
//     firstName: "",
//     userName: "",
//     password: "",
//     userRole: "",
//     confirmPassword: "",
//   });
//   // console.log(formData);
//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData({
//       ...formData,
//       [name]: value,
//     });
//   };

//   const addUser = async () => {
//     const { firstName, userName, password, confirmPassword, userRole } =
//       formData;

//     // Basic validation
//     if (password !== confirmPassword) {
//       alert("Password and Confirm Password do not match");
//       return;
//     }

//     const data = {
//       firstName,
//       userName,
//       password,
//       userRole,
//     };
//     try {
//       // const response = await fetch(`${baseURL}/api/users`, requestOptions);
//       const response = await api.post("/api/users", data);

//       if (response.status === 201) {
//         alert("User added successfully");
//       } else if (response.status === 409) {
//         alert("User already exists");
//       } else {
//         alert("An unexpected error occurred");
//       }
//     } catch (error) {
//       console.error("Error adding user:", error);
//       alert("An error occurred while adding the user");
//     }

//     // Clear form fields after submission
//     setFormData({
//       firstName: "",
//       userName: "",
//       password: "",
//       confirmPassword: "",
//       userRole: "",
//     });
//   };

//   const handleFormSubmit = async (e) => {
//     e.preventDefault();

//     if(props.status == "edit"){
//       if (
//         !formData.firstName ||
//         !formData.userName ||
//         !formData.password ||
//         !formData.confirmPassword ||
//         !formData.userRole
//       ) {
        
//         return;
//       }
//       props.onUpdate(formData);
//         UserList.onUpdate()
//     }
//     else{

    
//     // Check if any required field is empty
//     if (
//       !formData.firstName ||
//       !formData.userName ||
//       !formData.password ||
//       !formData.confirmPassword ||
//       !formData.userRole
//     ) {
//       alert("Please fill out all required fields");
//       return;
//     }

//     addUser();
//   };
// }

//   return (
//     <div className="max-w-md mx-auto p-6 bg-white rounded-md shadow-md">
//       <h1 className="text-2xl font-bold mb-4">  {props.status === "edit" ? "Update User" : "Add User"}</h1>
//       <form onSubmit={handleFormSubmit}>
//         <label className="block text-sm font-medium text-gray-600">
//           First Name:
//         </label>
//         <input
//           type="text"
//           name="firstName"
//           value={formData.firstName}
//           onChange={handleChange}
//           className="mt-1 p-2 border rounded-md w-full"
//           required
//         />

//         <label className="block mt-4 text-sm font-medium text-gray-600">
//           UserName:
//         </label>
//         <input
//           type="text"
//           name="userName"
//           value={formData.userName}
//           onChange={handleChange}
//           className="mt-1 p-2 border rounded-md w-full"
//           required
//         />

//         <label className="block mt-4 text-sm font-medium text-gray-600">
//           Password:
//         </label>
//         <input
//           type="password"
//           name="password"
//           value={formData.password}
//           onChange={handleChange}
//           className="mt-1 p-2 border rounded-md w-full"
//           required
//         />

//         <label className="block mt-4 text-sm font-medium text-gray-600">
//           Confirm Password:
//         </label>
//         <input
//           type="password"
//           name="confirmPassword"
//           value={formData.confirmPassword}
//           onChange={handleChange}
//           className="mt-1 p-2 border rounded-md w-full"
//           required
//         />

//         <label className="block mt-4 text-sm font-medium text-gray-600">
//           User Role:
//         </label>
//         <select
//           name="userRole"
//           value={formData.userRole}
//           defaultValue={"admin"}
//           onChange={handleChange}
//           className="mt-1 p-2 border rounded-md w-full"
//           required
//         >
//           <option value="admin">Admin</option>
//           <option value="user">User</option>
//         </select>

//         <button
//           type="submit"
//           className="mt-4 bg-green-500 text-white p-2 rounded-md hover:bg-green-600 
//             focus:outline-none focus:ring focus:border-blue-300"
//         >
//        {props.status === "edit" ? "Update" : "Add"}
//         </button>
//       </form>
//     </div>
//   );
// }

// export default AdminUserAddForm;



#######################
userlist using  antd tables and inline editable features


// import React, { useState, useEffect } from 'react';
// import { Form, Input, InputNumber, Popconfirm, Table, Typography, Button } from 'antd';
// import api from '../../utils/api';

// const EditableCell = ({
//   editing,
//   dataIndex,
//   title,
//   inputType,
//   record,
//   index,
//   children,
//   ...restProps
// }) => {
//   const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;
//   return (
//     <td {...restProps}>
//       {editing ? (
//         <Form.Item
//           name={dataIndex}
//           style={{ margin: 0 }}
//           rules={[{ required: true, message: `Please Input ${title}!` }]}
//         >
//           {inputNode}
//         </Form.Item>
//       ) : (
//         children
//       )}
//     </td>
//   );
// };

// const App = () => {
//   const [form] = Form.useForm();
//   const [data, setData] = useState([]);
//   const [editingKey, setEditingKey] = useState('');

//   useEffect(() => {
//     const fetchUsers = async () => {
//       try {
//         const response= await api.get('api/users');
//         if (response.data && Array.isArray(response.data.data)) {
//           setData(response.data.data);
//         } else {
//           console.error('Invalid data structure:', response);
//           setData([]);
//         }
//       } catch (error) {
//         console.error('Error fetching users:', error);
//       }
//     };

//     fetchUsers();
//   }, []);

//   const isEditing = (record) => record.key === editingKey;

//   const edit = (record) => {
//     form.setFieldsValue({
//       userName: '',
//       firstName: '',
//       userRole: '',
//       ...record,
//     });
//     setEditingKey(record.key);
//   };

//   const cancel = () => {
//     setEditingKey('');
//   };

//   const save = async (key) => {
//     try {
//       const row = await form.validateFields();
//       const newData = [...data];
//       const index = newData.findIndex((item) => key === item.key);
//       if (index > -1) {
//         const item = newData[index];
//         newData.splice(index, 1, { ...item, ...row });
//         setData(newData);
//         const updateData= await api.put(`/api/update/${editingKey}`,{data})
//         setEditingKey('');
//       } else {
//         newData.push(row);
//         setData(newData);
//         setEditingKey('');
//       }
//     } catch (errInfo) {
//       console.log('Validate Failed:', errInfo);
//     }
//   };

//   const handleAddRow = () => {
//     const newData = [...data];
//     newData.push({
//       key: newData.length.toString(), // Generate a unique key for the new row
//       userName: '', // Initialize with empty values
//       firstName: '',
//       userRole: '',
//     });
//     setData(newData);
//     setEditingKey(newData.length.toString()); // Set editing key to new row key to immediately start editing
//   };

//   const handleDeleteRow = (key) => {
//     const newData = [...data];
//     setData(newData.filter(item => item.key !== key));
//     setEditingKey(''); // Exit editing mode
//   };

//   const columns = [
//     {
//       title: 'userName',
//       dataIndex: 'userName',
//       width: '25%',
//       editable: true,
//     },
//     {
//       title: 'firstName',
//       dataIndex: 'firstName',
//       width: '15%',
//       editable: true,
//     },
//     {
//       title: 'userRole',
//       dataIndex: 'userRole',
//       width: '40%',
//       editable: true,
//     },
//     {
//       title: 'operation',
//       dataIndex: 'operation',
//       render: (_, record) => {
//         const editable = isEditing(record);
//         return editable ? (
//           <span>
//             <Typography.Link onClick={() => save(record.key)} style={{ marginRight: 8 }}>
//               Save
//             </Typography.Link>
//             <Popconfirm title="Sure to cancel?" onConfirm={cancel}>
//               <a>Cancel</a>
//             </Popconfirm>
//           </span>
//         ) : (
//           <span>
//             <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>
//               Edit
//             </Typography.Link>
//             <Popconfirm title="Sure to delete?" onConfirm={() => handleDeleteRow(record.key)}>
//               <a style={{ marginLeft: 8 }}>Delete</a>
//             </Popconfirm>
//           </span>
//         );
//       },
//     },
//   ];

//   const mergedColumns = columns.map((col) => {
//     if (!col.editable) {
//       return col;
//     }
//     return {
//       ...col,
//       onCell: (record) => ({
//         record,
//         inputType: col.dataIndex === 'firstName' ? 'string' : 'text',
//         dataIndex: col.dataIndex,
//         title: col.title,
//         editing: isEditing(record),
//       }),
//     };
//   });

//   return (
//     <div>
//       <Button onClick={handleAddRow} type="primary" style={{ marginBottom: 16 }}>
//         Add Row
//       </Button>
//       <Form form={form} component={false}>
//         <Table
//           components={{
//             body: { cell: EditableCell },
//           }}
//           bordered
//           dataSource={data}
//           columns={mergedColumns}
//           rowClassName="editable-row"
//           pagination={{ onChange: cancel }}
//         />
//       </Form>
//     </div>
//   );
// };

// export default App;
